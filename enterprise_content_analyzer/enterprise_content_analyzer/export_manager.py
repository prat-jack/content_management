import json
import pandas as pd
from datetime import datetime
from io import BytesIO
import streamlit as st
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
import markdown


class ExportManager:
    """Handles all export functionality for analysis results"""
    
    def __init__(self):
        self.timestamp = datetime.now()
        
    def generate_metadata(self, analysis_type, file_name=None, additional_metadata=None):
        """Generate standard metadata for exports"""
        metadata = {
            "export_timestamp": self.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "analysis_type": analysis_type,
            "generated_by": "Enterprise Content Analyzer",
            "version": "1.0.0"
        }
        
        if file_name:
            metadata["source_file"] = file_name
            
        if additional_metadata:
            metadata.update(additional_metadata)
            
        return metadata
    
    def export_to_json(self, results, analysis_type, file_name=None, additional_metadata=None):
        """Export analysis results to JSON format"""
        metadata = self.generate_metadata(analysis_type, file_name, additional_metadata)
        
        export_data = {
            "metadata": metadata,
            "analysis_results": results,
            "export_format": "json"
        }
        
        return json.dumps(export_data, indent=2, ensure_ascii=False)
    
    def export_to_markdown(self, results, analysis_type, file_name=None, additional_metadata=None):
        """Export analysis results to Markdown format"""
        metadata = self.generate_metadata(analysis_type, file_name, additional_metadata)
        
        md_content = f"""# Content Analysis Report

## Document Information
- **Source File:** {file_name or 'N/A'}
- **Analysis Type:** {analysis_type.title()}
- **Generated:** {metadata['export_timestamp']}
- **Generated By:** {metadata['generated_by']}

---

"""
        
        # Add content based on analysis type
        if analysis_type == "general":
            md_content += self._format_general_markdown(results)
        elif analysis_type == "competitive":
            md_content += self._format_competitive_markdown(results)
        elif analysis_type == "customer":
            md_content += self._format_customer_markdown(results)
        else:
            md_content += f"""## Analysis Results

```json
{json.dumps(results, indent=2)}
```
"""
        
        md_content += f"""

---

## Export Information
- **Export Format:** Markdown
- **Timestamp:** {metadata['export_timestamp']}
- **Version:** {metadata['version']}
"""
        
        return md_content
    
    def _format_general_markdown(self, results):
        """Format general analysis results for markdown"""
        content = """## Executive Summary
"""
        content += f"{results.get('summary', 'N/A')}\n\n"
        
        content += """## Key Findings
"""
        findings = results.get('key_findings', [])
        if isinstance(findings, list):
            for finding in findings:
                content += f"- {finding}\n"
        else:
            content += f"{findings}\n"
        content += "\n"
        
        content += """## Implications
"""
        content += f"{results.get('implications', 'N/A')}\n\n"
        
        content += """## Recommendations
"""
        recs = results.get('recommendations', [])
        if isinstance(recs, list):
            for rec in recs:
                content += f"- {rec}\n"
        else:
            content += f"{recs}\n"
        content += "\n"
        
        content += """## Content Analysis
"""
        content += f"- **Content Type:** {results.get('content_type', 'N/A')}\n"
        content += f"- **Quality Score:** {results.get('quality_score', 'N/A')}\n\n"
        
        return content
    
    def _format_competitive_markdown(self, results):
        """Format competitive analysis results for markdown"""
        content = """## Competitor Overview
"""
        content += f"{results.get('competitor_overview', 'N/A')}\n\n"
        
        content += """## Market Positioning
"""
        content += f"{results.get('market_positioning', 'N/A')}\n\n"
        
        content += """## SWOT Analysis

### Strengths
"""
        strengths = results.get('strengths', [])
        if isinstance(strengths, list):
            for s in strengths:
                content += f"- {s}\n"
        else:
            content += f"{strengths}\n"
        
        content += """
### Weaknesses
"""
        weaknesses = results.get('weaknesses', [])
        if isinstance(weaknesses, list):
            for w in weaknesses:
                content += f"- {w}\n"
        else:
            content += f"{weaknesses}\n"
        
        content += """
### Opportunities
"""
        opportunities = results.get('opportunities', [])
        if isinstance(opportunities, list):
            for o in opportunities:
                content += f"- {o}\n"
        else:
            content += f"{opportunities}\n"
        
        content += """
### Threats
"""
        threats = results.get('threats', [])
        if isinstance(threats, list):
            for t in threats:
                content += f"- {t}\n"
        else:
            content += f"{threats}\n"
        
        content += """
## Strategic Recommendations
"""
        recs = results.get('strategic_recommendations', [])
        if isinstance(recs, list):
            for rec in recs:
                content += f"- {rec}\n"
        else:
            content += f"{recs}\n"
        content += "\n"
        
        return content
    
    def _format_customer_markdown(self, results):
        """Format customer analysis results for markdown"""
        content = """## Customer Analysis Summary
"""
        content += f"{results.get('summary', 'N/A')}\n\n"
        
        content += f"""## Satisfaction Metrics
- **Satisfaction Score:** {results.get('satisfaction_score', 'N/A')}
- **Customer Segment:** {results.get('customer_segment', 'N/A')}

## Positive Feedback
"""
        positives = results.get('positive_points', [])
        if isinstance(positives, list):
            for p in positives:
                content += f"- {p}\n"
        else:
            content += f"{positives}\n"
        
        content += """
## Pain Points
"""
        pains = results.get('pain_points', [])
        if isinstance(pains, list):
            for pain in pains:
                content += f"- {pain}\n"
        else:
            content += f"{pains}\n"
        
        content += """
## Suggested Improvements
"""
        improvements = results.get('suggested_improvements', [])
        if isinstance(improvements, list):
            for imp in improvements:
                content += f"- {imp}\n"
        else:
            content += f"{improvements}\n"
        
        content += """
## Priority Actions
"""
        actions = results.get('priority_actions', [])
        if isinstance(actions, list):
            for a in actions:
                content += f"- {a}\n"
        else:
            content += f"{actions}\n"
        content += "\n"
        
        return content
    
    def export_to_pdf(self, results, analysis_type, file_name=None, additional_metadata=None):
        """Export analysis results to PDF format"""
        metadata = self.generate_metadata(analysis_type, file_name, additional_metadata)
        
        # Create PDF in memory
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, 
                              topMargin=72, bottomMargin=18)
        
        # Get styles
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2E4A6B')
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            spaceBefore=20,
            spaceAfter=12,
            textColor=colors.HexColor('#2E4A6B')
        )
        
        # Build content
        story = []
        
        # Title
        story.append(Paragraph("Content Analysis Report", title_style))
        story.append(Spacer(1, 20))
        
        # Document info table
        doc_info_data = [
            ['Source File:', file_name or 'N/A'],
            ['Analysis Type:', analysis_type.title()],
            ['Generated:', metadata['export_timestamp']],
            ['Generated By:', metadata['generated_by']]
        ]
        
        doc_info_table = Table(doc_info_data, colWidths=[2*inch, 4*inch])
        doc_info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#F0F0F0')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(doc_info_table)
        story.append(Spacer(1, 30))
        
        # Add content based on analysis type
        if analysis_type == "general":
            story.extend(self._format_general_pdf(results, styles, heading_style))
        elif analysis_type == "competitive":
            story.extend(self._format_competitive_pdf(results, styles, heading_style))
        elif analysis_type == "customer":
            story.extend(self._format_customer_pdf(results, styles, heading_style))
        else:
            story.append(Paragraph("Analysis Results", heading_style))
            story.append(Paragraph(f"<pre>{json.dumps(results, indent=2)}</pre>", styles['Code']))
        
        # Footer
        story.append(Spacer(1, 30))
        story.append(Paragraph("---", styles['Normal']))
        story.append(Paragraph(f"<i>Report generated on {metadata['export_timestamp']} by {metadata['generated_by']} v{metadata['version']}</i>", styles['Normal']))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _format_general_pdf(self, results, styles, heading_style):
        """Format general analysis results for PDF"""
        story = []
        
        story.append(Paragraph("Executive Summary", heading_style))
        story.append(Paragraph(results.get('summary', 'N/A'), styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Key Findings", heading_style))
        findings = results.get('key_findings', [])
        if isinstance(findings, list):
            for finding in findings:
                story.append(Paragraph(f"• {finding}", styles['Normal']))
        else:
            story.append(Paragraph(findings, styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Implications", heading_style))
        story.append(Paragraph(results.get('implications', 'N/A'), styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Recommendations", heading_style))
        recs = results.get('recommendations', [])
        if isinstance(recs, list):
            for rec in recs:
                story.append(Paragraph(f"• {rec}", styles['Normal']))
        else:
            story.append(Paragraph(recs, styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Content Analysis", heading_style))
        story.append(Paragraph(f"<b>Content Type:</b> {results.get('content_type', 'N/A')}", styles['Normal']))
        story.append(Paragraph(f"<b>Quality Score:</b> {results.get('quality_score', 'N/A')}", styles['Normal']))
        
        return story
    
    def _format_competitive_pdf(self, results, styles, heading_style):
        """Format competitive analysis results for PDF"""
        story = []
        
        story.append(Paragraph("Competitor Overview", heading_style))
        story.append(Paragraph(results.get('competitor_overview', 'N/A'), styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Market Positioning", heading_style))
        story.append(Paragraph(results.get('market_positioning', 'N/A'), styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("SWOT Analysis", heading_style))
        
        # Strengths
        story.append(Paragraph("<b>Strengths:</b>", styles['Normal']))
        strengths = results.get('strengths', [])
        if isinstance(strengths, list):
            for s in strengths:
                story.append(Paragraph(f"• {s}", styles['Normal']))
        else:
            story.append(Paragraph(strengths, styles['Normal']))
        story.append(Spacer(1, 10))
        
        # Weaknesses
        story.append(Paragraph("<b>Weaknesses:</b>", styles['Normal']))
        weaknesses = results.get('weaknesses', [])
        if isinstance(weaknesses, list):
            for w in weaknesses:
                story.append(Paragraph(f"• {w}", styles['Normal']))
        else:
            story.append(Paragraph(weaknesses, styles['Normal']))
        story.append(Spacer(1, 10))
        
        # Opportunities
        story.append(Paragraph("<b>Opportunities:</b>", styles['Normal']))
        opportunities = results.get('opportunities', [])
        if isinstance(opportunities, list):
            for o in opportunities:
                story.append(Paragraph(f"• {o}", styles['Normal']))
        else:
            story.append(Paragraph(opportunities, styles['Normal']))
        story.append(Spacer(1, 10))
        
        # Threats
        story.append(Paragraph("<b>Threats:</b>", styles['Normal']))
        threats = results.get('threats', [])
        if isinstance(threats, list):
            for t in threats:
                story.append(Paragraph(f"• {t}", styles['Normal']))
        else:
            story.append(Paragraph(threats, styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Strategic Recommendations", heading_style))
        recs = results.get('strategic_recommendations', [])
        if isinstance(recs, list):
            for rec in recs:
                story.append(Paragraph(f"• {rec}", styles['Normal']))
        else:
            story.append(Paragraph(recs, styles['Normal']))
        
        return story
    
    def _format_customer_pdf(self, results, styles, heading_style):
        """Format customer analysis results for PDF"""
        story = []
        
        story.append(Paragraph("Customer Analysis Summary", heading_style))
        story.append(Paragraph(results.get('summary', 'N/A'), styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Satisfaction Metrics", heading_style))
        story.append(Paragraph(f"<b>Satisfaction Score:</b> {results.get('satisfaction_score', 'N/A')}", styles['Normal']))
        story.append(Paragraph(f"<b>Customer Segment:</b> {results.get('customer_segment', 'N/A')}", styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Positive Feedback", heading_style))
        positives = results.get('positive_points', [])
        if isinstance(positives, list):
            for p in positives:
                story.append(Paragraph(f"• {p}", styles['Normal']))
        else:
            story.append(Paragraph(positives, styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Pain Points", heading_style))
        pains = results.get('pain_points', [])
        if isinstance(pains, list):
            for pain in pains:
                story.append(Paragraph(f"• {pain}", styles['Normal']))
        else:
            story.append(Paragraph(pains, styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Suggested Improvements", heading_style))
        improvements = results.get('suggested_improvements', [])
        if isinstance(improvements, list):
            for imp in improvements:
                story.append(Paragraph(f"• {imp}", styles['Normal']))
        else:
            story.append(Paragraph(improvements, styles['Normal']))
        story.append(Spacer(1, 15))
        
        story.append(Paragraph("Priority Actions", heading_style))
        actions = results.get('priority_actions', [])
        if isinstance(actions, list):
            for a in actions:
                story.append(Paragraph(f"• {a}", styles['Normal']))
        else:
            story.append(Paragraph(actions, styles['Normal']))
        
        return story
    
    def export_batch_to_csv(self, batch_results_df, additional_metadata=None):
        """Export batch results to CSV with metadata"""
        metadata = self.generate_metadata("batch_analysis", additional_metadata=additional_metadata)
        
        # Add metadata as comment rows at the top
        csv_content = f"# Export Timestamp: {metadata['export_timestamp']}\n"
        csv_content += f"# Generated By: {metadata['generated_by']} v{metadata['version']}\n"
        csv_content += f"# Analysis Type: Batch Analysis\n"
        csv_content += "#\n"
        
        # Add the actual CSV data
        csv_content += batch_results_df.to_csv(index=False)
        
        return csv_content
    
    def create_clipboard_text(self, results, analysis_type, file_name=None):
        """Create formatted text suitable for clipboard"""
        timestamp = self.timestamp.strftime("%Y-%m-%d %H:%M:%S")
        
        clipboard_text = f"""CONTENT ANALYSIS REPORT
========================
Source: {file_name or 'N/A'}
Analysis Type: {analysis_type.title()}
Generated: {timestamp}

"""
        
        if analysis_type == "general":
            clipboard_text += f"""EXECUTIVE SUMMARY
{results.get('summary', 'N/A')}

KEY FINDINGS
{self._format_list_for_clipboard(results.get('key_findings', []))}

IMPLICATIONS
{results.get('implications', 'N/A')}

RECOMMENDATIONS
{self._format_list_for_clipboard(results.get('recommendations', []))}

CONTENT DETAILS
Content Type: {results.get('content_type', 'N/A')}
Quality Score: {results.get('quality_score', 'N/A')}
"""
        elif analysis_type == "competitive":
            clipboard_text += f"""COMPETITOR OVERVIEW
{results.get('competitor_overview', 'N/A')}

MARKET POSITIONING
{results.get('market_positioning', 'N/A')}

STRENGTHS
{self._format_list_for_clipboard(results.get('strengths', []))}

WEAKNESSES
{self._format_list_for_clipboard(results.get('weaknesses', []))}

OPPORTUNITIES
{self._format_list_for_clipboard(results.get('opportunities', []))}

THREATS
{self._format_list_for_clipboard(results.get('threats', []))}

STRATEGIC RECOMMENDATIONS
{self._format_list_for_clipboard(results.get('strategic_recommendations', []))}
"""
        elif analysis_type == "customer":
            clipboard_text += f"""CUSTOMER ANALYSIS SUMMARY
{results.get('summary', 'N/A')}

SATISFACTION METRICS
Satisfaction Score: {results.get('satisfaction_score', 'N/A')}
Customer Segment: {results.get('customer_segment', 'N/A')}

POSITIVE FEEDBACK
{self._format_list_for_clipboard(results.get('positive_points', []))}

PAIN POINTS
{self._format_list_for_clipboard(results.get('pain_points', []))}

SUGGESTED IMPROVEMENTS
{self._format_list_for_clipboard(results.get('suggested_improvements', []))}

PRIORITY ACTIONS
{self._format_list_for_clipboard(results.get('priority_actions', []))}
"""
        
        clipboard_text += f"""
========================
Generated by Enterprise Content Analyzer v1.0.0
"""
        
        return clipboard_text
    
    def _format_list_for_clipboard(self, items):
        """Format a list for clipboard text"""
        if isinstance(items, list):
            return '\n'.join(f"• {item}" for item in items)
        return str(items) if items else "N/A"